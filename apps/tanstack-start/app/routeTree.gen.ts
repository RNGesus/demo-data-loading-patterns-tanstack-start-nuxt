/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ShellImport } from './routes/_shell'
import { Route as ShellIndexImport } from './routes/_shell/index'
import { Route as ShellOpenLibraryIndexImport } from './routes/_shell/openLibrary/index'
import { Route as ShellCountriesIndexImport } from './routes/_shell/countries/index'
import { Route as ShellCountriesCountryImport } from './routes/_shell/countries/$country'

// Create/Update Routes

const ShellRoute = ShellImport.update({
  id: '/_shell',
  getParentRoute: () => rootRoute,
} as any)

const ShellIndexRoute = ShellIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ShellRoute,
} as any)

const ShellOpenLibraryIndexRoute = ShellOpenLibraryIndexImport.update({
  id: '/openLibrary/',
  path: '/openLibrary/',
  getParentRoute: () => ShellRoute,
} as any)

const ShellCountriesIndexRoute = ShellCountriesIndexImport.update({
  id: '/countries/',
  path: '/countries/',
  getParentRoute: () => ShellRoute,
} as any)

const ShellCountriesCountryRoute = ShellCountriesCountryImport.update({
  id: '/countries/$country',
  path: '/countries/$country',
  getParentRoute: () => ShellRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_shell': {
      id: '/_shell'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ShellImport
      parentRoute: typeof rootRoute
    }
    '/_shell/': {
      id: '/_shell/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ShellIndexImport
      parentRoute: typeof ShellImport
    }
    '/_shell/countries/$country': {
      id: '/_shell/countries/$country'
      path: '/countries/$country'
      fullPath: '/countries/$country'
      preLoaderRoute: typeof ShellCountriesCountryImport
      parentRoute: typeof ShellImport
    }
    '/_shell/countries/': {
      id: '/_shell/countries/'
      path: '/countries'
      fullPath: '/countries'
      preLoaderRoute: typeof ShellCountriesIndexImport
      parentRoute: typeof ShellImport
    }
    '/_shell/openLibrary/': {
      id: '/_shell/openLibrary/'
      path: '/openLibrary'
      fullPath: '/openLibrary'
      preLoaderRoute: typeof ShellOpenLibraryIndexImport
      parentRoute: typeof ShellImport
    }
  }
}

// Create and export the route tree

interface ShellRouteChildren {
  ShellIndexRoute: typeof ShellIndexRoute
  ShellCountriesCountryRoute: typeof ShellCountriesCountryRoute
  ShellCountriesIndexRoute: typeof ShellCountriesIndexRoute
  ShellOpenLibraryIndexRoute: typeof ShellOpenLibraryIndexRoute
}

const ShellRouteChildren: ShellRouteChildren = {
  ShellIndexRoute: ShellIndexRoute,
  ShellCountriesCountryRoute: ShellCountriesCountryRoute,
  ShellCountriesIndexRoute: ShellCountriesIndexRoute,
  ShellOpenLibraryIndexRoute: ShellOpenLibraryIndexRoute,
}

const ShellRouteWithChildren = ShellRoute._addFileChildren(ShellRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof ShellRouteWithChildren
  '/': typeof ShellIndexRoute
  '/countries/$country': typeof ShellCountriesCountryRoute
  '/countries': typeof ShellCountriesIndexRoute
  '/openLibrary': typeof ShellOpenLibraryIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof ShellIndexRoute
  '/countries/$country': typeof ShellCountriesCountryRoute
  '/countries': typeof ShellCountriesIndexRoute
  '/openLibrary': typeof ShellOpenLibraryIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_shell': typeof ShellRouteWithChildren
  '/_shell/': typeof ShellIndexRoute
  '/_shell/countries/$country': typeof ShellCountriesCountryRoute
  '/_shell/countries/': typeof ShellCountriesIndexRoute
  '/_shell/openLibrary/': typeof ShellOpenLibraryIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/countries/$country' | '/countries' | '/openLibrary'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/countries/$country' | '/countries' | '/openLibrary'
  id:
    | '__root__'
    | '/_shell'
    | '/_shell/'
    | '/_shell/countries/$country'
    | '/_shell/countries/'
    | '/_shell/openLibrary/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ShellRoute: typeof ShellRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  ShellRoute: ShellRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_shell"
      ]
    },
    "/_shell": {
      "filePath": "_shell.tsx",
      "children": [
        "/_shell/",
        "/_shell/countries/$country",
        "/_shell/countries/",
        "/_shell/openLibrary/"
      ]
    },
    "/_shell/": {
      "filePath": "_shell/index.tsx",
      "parent": "/_shell"
    },
    "/_shell/countries/$country": {
      "filePath": "_shell/countries/$country.tsx",
      "parent": "/_shell"
    },
    "/_shell/countries/": {
      "filePath": "_shell/countries/index.tsx",
      "parent": "/_shell"
    },
    "/_shell/openLibrary/": {
      "filePath": "_shell/openLibrary/index.tsx",
      "parent": "/_shell"
    }
  }
}
ROUTE_MANIFEST_END */
