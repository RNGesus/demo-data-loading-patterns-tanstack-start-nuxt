/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ShellImport } from './routes/_shell'
import { Route as ShellIndexImport } from './routes/_shell/index'
import { Route as ShellCountrySelectorImport } from './routes/_shell/_countrySelector'
import { Route as ShellOpenLibraryRouteImport } from './routes/_shell/openLibrary/route'
import { Route as ShellEnergyChartsRouteImport } from './routes/_shell/energyCharts/route'
import { Route as ShellEnergyChartsCountryImport } from './routes/_shell/energyCharts/$country'
import { Route as ShellCountrySelectorStationCountriesIndexImport } from './routes/_shell/_countrySelector/stationCountries/index'
import { Route as ShellCountrySelectorStationCountriesCountryImport } from './routes/_shell/_countrySelector/stationCountries/$country'

// Create/Update Routes

const ShellRoute = ShellImport.update({
  id: '/_shell',
  getParentRoute: () => rootRoute,
} as any)

const ShellIndexRoute = ShellIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ShellRoute,
} as any)

const ShellCountrySelectorRoute = ShellCountrySelectorImport.update({
  id: '/_countrySelector',
  getParentRoute: () => ShellRoute,
} as any)

const ShellOpenLibraryRouteRoute = ShellOpenLibraryRouteImport.update({
  id: '/openLibrary',
  path: '/openLibrary',
  getParentRoute: () => ShellRoute,
} as any)

const ShellEnergyChartsRouteRoute = ShellEnergyChartsRouteImport.update({
  id: '/energyCharts',
  path: '/energyCharts',
  getParentRoute: () => ShellRoute,
} as any)

const ShellEnergyChartsCountryRoute = ShellEnergyChartsCountryImport.update({
  id: '/$country',
  path: '/$country',
  getParentRoute: () => ShellEnergyChartsRouteRoute,
} as any)

const ShellCountrySelectorStationCountriesIndexRoute =
  ShellCountrySelectorStationCountriesIndexImport.update({
    id: '/stationCountries/',
    path: '/stationCountries/',
    getParentRoute: () => ShellCountrySelectorRoute,
  } as any)

const ShellCountrySelectorStationCountriesCountryRoute =
  ShellCountrySelectorStationCountriesCountryImport.update({
    id: '/stationCountries/$country',
    path: '/stationCountries/$country',
    getParentRoute: () => ShellCountrySelectorRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_shell': {
      id: '/_shell'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ShellImport
      parentRoute: typeof rootRoute
    }
    '/_shell/energyCharts': {
      id: '/_shell/energyCharts'
      path: '/energyCharts'
      fullPath: '/energyCharts'
      preLoaderRoute: typeof ShellEnergyChartsRouteImport
      parentRoute: typeof ShellImport
    }
    '/_shell/openLibrary': {
      id: '/_shell/openLibrary'
      path: '/openLibrary'
      fullPath: '/openLibrary'
      preLoaderRoute: typeof ShellOpenLibraryRouteImport
      parentRoute: typeof ShellImport
    }
    '/_shell/_countrySelector': {
      id: '/_shell/_countrySelector'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ShellCountrySelectorImport
      parentRoute: typeof ShellImport
    }
    '/_shell/': {
      id: '/_shell/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ShellIndexImport
      parentRoute: typeof ShellImport
    }
    '/_shell/energyCharts/$country': {
      id: '/_shell/energyCharts/$country'
      path: '/$country'
      fullPath: '/energyCharts/$country'
      preLoaderRoute: typeof ShellEnergyChartsCountryImport
      parentRoute: typeof ShellEnergyChartsRouteImport
    }
    '/_shell/_countrySelector/stationCountries/$country': {
      id: '/_shell/_countrySelector/stationCountries/$country'
      path: '/stationCountries/$country'
      fullPath: '/stationCountries/$country'
      preLoaderRoute: typeof ShellCountrySelectorStationCountriesCountryImport
      parentRoute: typeof ShellCountrySelectorImport
    }
    '/_shell/_countrySelector/stationCountries/': {
      id: '/_shell/_countrySelector/stationCountries/'
      path: '/stationCountries'
      fullPath: '/stationCountries'
      preLoaderRoute: typeof ShellCountrySelectorStationCountriesIndexImport
      parentRoute: typeof ShellCountrySelectorImport
    }
  }
}

// Create and export the route tree

interface ShellEnergyChartsRouteRouteChildren {
  ShellEnergyChartsCountryRoute: typeof ShellEnergyChartsCountryRoute
}

const ShellEnergyChartsRouteRouteChildren: ShellEnergyChartsRouteRouteChildren =
  {
    ShellEnergyChartsCountryRoute: ShellEnergyChartsCountryRoute,
  }

const ShellEnergyChartsRouteRouteWithChildren =
  ShellEnergyChartsRouteRoute._addFileChildren(
    ShellEnergyChartsRouteRouteChildren,
  )

interface ShellCountrySelectorRouteChildren {
  ShellCountrySelectorStationCountriesCountryRoute: typeof ShellCountrySelectorStationCountriesCountryRoute
  ShellCountrySelectorStationCountriesIndexRoute: typeof ShellCountrySelectorStationCountriesIndexRoute
}

const ShellCountrySelectorRouteChildren: ShellCountrySelectorRouteChildren = {
  ShellCountrySelectorStationCountriesCountryRoute:
    ShellCountrySelectorStationCountriesCountryRoute,
  ShellCountrySelectorStationCountriesIndexRoute:
    ShellCountrySelectorStationCountriesIndexRoute,
}

const ShellCountrySelectorRouteWithChildren =
  ShellCountrySelectorRoute._addFileChildren(ShellCountrySelectorRouteChildren)

interface ShellRouteChildren {
  ShellEnergyChartsRouteRoute: typeof ShellEnergyChartsRouteRouteWithChildren
  ShellOpenLibraryRouteRoute: typeof ShellOpenLibraryRouteRoute
  ShellCountrySelectorRoute: typeof ShellCountrySelectorRouteWithChildren
  ShellIndexRoute: typeof ShellIndexRoute
}

const ShellRouteChildren: ShellRouteChildren = {
  ShellEnergyChartsRouteRoute: ShellEnergyChartsRouteRouteWithChildren,
  ShellOpenLibraryRouteRoute: ShellOpenLibraryRouteRoute,
  ShellCountrySelectorRoute: ShellCountrySelectorRouteWithChildren,
  ShellIndexRoute: ShellIndexRoute,
}

const ShellRouteWithChildren = ShellRoute._addFileChildren(ShellRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof ShellCountrySelectorRouteWithChildren
  '/energyCharts': typeof ShellEnergyChartsRouteRouteWithChildren
  '/openLibrary': typeof ShellOpenLibraryRouteRoute
  '/': typeof ShellIndexRoute
  '/energyCharts/$country': typeof ShellEnergyChartsCountryRoute
  '/stationCountries/$country': typeof ShellCountrySelectorStationCountriesCountryRoute
  '/stationCountries': typeof ShellCountrySelectorStationCountriesIndexRoute
}

export interface FileRoutesByTo {
  '/energyCharts': typeof ShellEnergyChartsRouteRouteWithChildren
  '/openLibrary': typeof ShellOpenLibraryRouteRoute
  '': typeof ShellCountrySelectorRouteWithChildren
  '/': typeof ShellIndexRoute
  '/energyCharts/$country': typeof ShellEnergyChartsCountryRoute
  '/stationCountries/$country': typeof ShellCountrySelectorStationCountriesCountryRoute
  '/stationCountries': typeof ShellCountrySelectorStationCountriesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_shell': typeof ShellRouteWithChildren
  '/_shell/energyCharts': typeof ShellEnergyChartsRouteRouteWithChildren
  '/_shell/openLibrary': typeof ShellOpenLibraryRouteRoute
  '/_shell/_countrySelector': typeof ShellCountrySelectorRouteWithChildren
  '/_shell/': typeof ShellIndexRoute
  '/_shell/energyCharts/$country': typeof ShellEnergyChartsCountryRoute
  '/_shell/_countrySelector/stationCountries/$country': typeof ShellCountrySelectorStationCountriesCountryRoute
  '/_shell/_countrySelector/stationCountries/': typeof ShellCountrySelectorStationCountriesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/energyCharts'
    | '/openLibrary'
    | '/'
    | '/energyCharts/$country'
    | '/stationCountries/$country'
    | '/stationCountries'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/energyCharts'
    | '/openLibrary'
    | ''
    | '/'
    | '/energyCharts/$country'
    | '/stationCountries/$country'
    | '/stationCountries'
  id:
    | '__root__'
    | '/_shell'
    | '/_shell/energyCharts'
    | '/_shell/openLibrary'
    | '/_shell/_countrySelector'
    | '/_shell/'
    | '/_shell/energyCharts/$country'
    | '/_shell/_countrySelector/stationCountries/$country'
    | '/_shell/_countrySelector/stationCountries/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ShellRoute: typeof ShellRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  ShellRoute: ShellRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_shell"
      ]
    },
    "/_shell": {
      "filePath": "_shell.tsx",
      "children": [
        "/_shell/energyCharts",
        "/_shell/openLibrary",
        "/_shell/_countrySelector",
        "/_shell/"
      ]
    },
    "/_shell/energyCharts": {
      "filePath": "_shell/energyCharts/route.tsx",
      "parent": "/_shell",
      "children": [
        "/_shell/energyCharts/$country"
      ]
    },
    "/_shell/openLibrary": {
      "filePath": "_shell/openLibrary/route.tsx",
      "parent": "/_shell"
    },
    "/_shell/_countrySelector": {
      "filePath": "_shell/_countrySelector.tsx",
      "parent": "/_shell",
      "children": [
        "/_shell/_countrySelector/stationCountries/$country",
        "/_shell/_countrySelector/stationCountries/"
      ]
    },
    "/_shell/": {
      "filePath": "_shell/index.tsx",
      "parent": "/_shell"
    },
    "/_shell/energyCharts/$country": {
      "filePath": "_shell/energyCharts/$country.tsx",
      "parent": "/_shell/energyCharts"
    },
    "/_shell/_countrySelector/stationCountries/$country": {
      "filePath": "_shell/_countrySelector/stationCountries/$country.tsx",
      "parent": "/_shell/_countrySelector"
    },
    "/_shell/_countrySelector/stationCountries/": {
      "filePath": "_shell/_countrySelector/stationCountries/index.tsx",
      "parent": "/_shell/_countrySelector"
    }
  }
}
ROUTE_MANIFEST_END */
