/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ShellRouteImport } from './routes/_shell'
import { Route as ShellIndexRouteImport } from './routes/_shell/index'
import { Route as ShellStationCountrySelectorRouteImport } from './routes/_shell/_stationCountrySelector'
import { Route as ShellEnergyChartsHeaderRouteImport } from './routes/_shell/_energyChartsHeader'
import { Route as ShellOpenLibraryIndexRouteImport } from './routes/_shell/openLibrary/index'
import { Route as ShellStationCountrySelectorStationCountriesIndexRouteImport } from './routes/_shell/_stationCountrySelector/stationCountries/index'
import { Route as ShellEnergyChartsHeaderEnergyChartsIndexRouteImport } from './routes/_shell/_energyChartsHeader/energyCharts/index'
import { Route as ShellStationCountrySelectorStationCountriesCountryRouteImport } from './routes/_shell/_stationCountrySelector/stationCountries/$country'
import { Route as ShellEnergyChartsHeaderEnergyChartsCountryRouteImport } from './routes/_shell/_energyChartsHeader/energyCharts/$country'

const ShellRoute = ShellRouteImport.update({
  id: '/_shell',
  getParentRoute: () => rootRouteImport,
} as any)
const ShellIndexRoute = ShellIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ShellRoute,
} as any)
const ShellStationCountrySelectorRoute =
  ShellStationCountrySelectorRouteImport.update({
    id: '/_stationCountrySelector',
    getParentRoute: () => ShellRoute,
  } as any)
const ShellEnergyChartsHeaderRoute = ShellEnergyChartsHeaderRouteImport.update({
  id: '/_energyChartsHeader',
  getParentRoute: () => ShellRoute,
} as any)
const ShellOpenLibraryIndexRoute = ShellOpenLibraryIndexRouteImport.update({
  id: '/openLibrary/',
  path: '/openLibrary/',
  getParentRoute: () => ShellRoute,
} as any)
const ShellStationCountrySelectorStationCountriesIndexRoute =
  ShellStationCountrySelectorStationCountriesIndexRouteImport.update({
    id: '/stationCountries/',
    path: '/stationCountries/',
    getParentRoute: () => ShellStationCountrySelectorRoute,
  } as any)
const ShellEnergyChartsHeaderEnergyChartsIndexRoute =
  ShellEnergyChartsHeaderEnergyChartsIndexRouteImport.update({
    id: '/energyCharts/',
    path: '/energyCharts/',
    getParentRoute: () => ShellEnergyChartsHeaderRoute,
  } as any)
const ShellStationCountrySelectorStationCountriesCountryRoute =
  ShellStationCountrySelectorStationCountriesCountryRouteImport.update({
    id: '/stationCountries/$country',
    path: '/stationCountries/$country',
    getParentRoute: () => ShellStationCountrySelectorRoute,
  } as any)
const ShellEnergyChartsHeaderEnergyChartsCountryRoute =
  ShellEnergyChartsHeaderEnergyChartsCountryRouteImport.update({
    id: '/energyCharts/$country',
    path: '/energyCharts/$country',
    getParentRoute: () => ShellEnergyChartsHeaderRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof ShellIndexRoute
  '/openLibrary': typeof ShellOpenLibraryIndexRoute
  '/energyCharts/$country': typeof ShellEnergyChartsHeaderEnergyChartsCountryRoute
  '/stationCountries/$country': typeof ShellStationCountrySelectorStationCountriesCountryRoute
  '/energyCharts': typeof ShellEnergyChartsHeaderEnergyChartsIndexRoute
  '/stationCountries': typeof ShellStationCountrySelectorStationCountriesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof ShellIndexRoute
  '/openLibrary': typeof ShellOpenLibraryIndexRoute
  '/energyCharts/$country': typeof ShellEnergyChartsHeaderEnergyChartsCountryRoute
  '/stationCountries/$country': typeof ShellStationCountrySelectorStationCountriesCountryRoute
  '/energyCharts': typeof ShellEnergyChartsHeaderEnergyChartsIndexRoute
  '/stationCountries': typeof ShellStationCountrySelectorStationCountriesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_shell': typeof ShellRouteWithChildren
  '/_shell/_energyChartsHeader': typeof ShellEnergyChartsHeaderRouteWithChildren
  '/_shell/_stationCountrySelector': typeof ShellStationCountrySelectorRouteWithChildren
  '/_shell/': typeof ShellIndexRoute
  '/_shell/openLibrary/': typeof ShellOpenLibraryIndexRoute
  '/_shell/_energyChartsHeader/energyCharts/$country': typeof ShellEnergyChartsHeaderEnergyChartsCountryRoute
  '/_shell/_stationCountrySelector/stationCountries/$country': typeof ShellStationCountrySelectorStationCountriesCountryRoute
  '/_shell/_energyChartsHeader/energyCharts/': typeof ShellEnergyChartsHeaderEnergyChartsIndexRoute
  '/_shell/_stationCountrySelector/stationCountries/': typeof ShellStationCountrySelectorStationCountriesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/openLibrary'
    | '/energyCharts/$country'
    | '/stationCountries/$country'
    | '/energyCharts'
    | '/stationCountries'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/openLibrary'
    | '/energyCharts/$country'
    | '/stationCountries/$country'
    | '/energyCharts'
    | '/stationCountries'
  id:
    | '__root__'
    | '/_shell'
    | '/_shell/_energyChartsHeader'
    | '/_shell/_stationCountrySelector'
    | '/_shell/'
    | '/_shell/openLibrary/'
    | '/_shell/_energyChartsHeader/energyCharts/$country'
    | '/_shell/_stationCountrySelector/stationCountries/$country'
    | '/_shell/_energyChartsHeader/energyCharts/'
    | '/_shell/_stationCountrySelector/stationCountries/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ShellRoute: typeof ShellRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_shell': {
      id: '/_shell'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ShellRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_shell/': {
      id: '/_shell/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ShellIndexRouteImport
      parentRoute: typeof ShellRoute
    }
    '/_shell/_stationCountrySelector': {
      id: '/_shell/_stationCountrySelector'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ShellStationCountrySelectorRouteImport
      parentRoute: typeof ShellRoute
    }
    '/_shell/_energyChartsHeader': {
      id: '/_shell/_energyChartsHeader'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ShellEnergyChartsHeaderRouteImport
      parentRoute: typeof ShellRoute
    }
    '/_shell/openLibrary/': {
      id: '/_shell/openLibrary/'
      path: '/openLibrary'
      fullPath: '/openLibrary'
      preLoaderRoute: typeof ShellOpenLibraryIndexRouteImport
      parentRoute: typeof ShellRoute
    }
    '/_shell/_stationCountrySelector/stationCountries/': {
      id: '/_shell/_stationCountrySelector/stationCountries/'
      path: '/stationCountries'
      fullPath: '/stationCountries'
      preLoaderRoute: typeof ShellStationCountrySelectorStationCountriesIndexRouteImport
      parentRoute: typeof ShellStationCountrySelectorRoute
    }
    '/_shell/_energyChartsHeader/energyCharts/': {
      id: '/_shell/_energyChartsHeader/energyCharts/'
      path: '/energyCharts'
      fullPath: '/energyCharts'
      preLoaderRoute: typeof ShellEnergyChartsHeaderEnergyChartsIndexRouteImport
      parentRoute: typeof ShellEnergyChartsHeaderRoute
    }
    '/_shell/_stationCountrySelector/stationCountries/$country': {
      id: '/_shell/_stationCountrySelector/stationCountries/$country'
      path: '/stationCountries/$country'
      fullPath: '/stationCountries/$country'
      preLoaderRoute: typeof ShellStationCountrySelectorStationCountriesCountryRouteImport
      parentRoute: typeof ShellStationCountrySelectorRoute
    }
    '/_shell/_energyChartsHeader/energyCharts/$country': {
      id: '/_shell/_energyChartsHeader/energyCharts/$country'
      path: '/energyCharts/$country'
      fullPath: '/energyCharts/$country'
      preLoaderRoute: typeof ShellEnergyChartsHeaderEnergyChartsCountryRouteImport
      parentRoute: typeof ShellEnergyChartsHeaderRoute
    }
  }
}

interface ShellEnergyChartsHeaderRouteChildren {
  ShellEnergyChartsHeaderEnergyChartsCountryRoute: typeof ShellEnergyChartsHeaderEnergyChartsCountryRoute
  ShellEnergyChartsHeaderEnergyChartsIndexRoute: typeof ShellEnergyChartsHeaderEnergyChartsIndexRoute
}

const ShellEnergyChartsHeaderRouteChildren: ShellEnergyChartsHeaderRouteChildren =
  {
    ShellEnergyChartsHeaderEnergyChartsCountryRoute:
      ShellEnergyChartsHeaderEnergyChartsCountryRoute,
    ShellEnergyChartsHeaderEnergyChartsIndexRoute:
      ShellEnergyChartsHeaderEnergyChartsIndexRoute,
  }

const ShellEnergyChartsHeaderRouteWithChildren =
  ShellEnergyChartsHeaderRoute._addFileChildren(
    ShellEnergyChartsHeaderRouteChildren,
  )

interface ShellStationCountrySelectorRouteChildren {
  ShellStationCountrySelectorStationCountriesCountryRoute: typeof ShellStationCountrySelectorStationCountriesCountryRoute
  ShellStationCountrySelectorStationCountriesIndexRoute: typeof ShellStationCountrySelectorStationCountriesIndexRoute
}

const ShellStationCountrySelectorRouteChildren: ShellStationCountrySelectorRouteChildren =
  {
    ShellStationCountrySelectorStationCountriesCountryRoute:
      ShellStationCountrySelectorStationCountriesCountryRoute,
    ShellStationCountrySelectorStationCountriesIndexRoute:
      ShellStationCountrySelectorStationCountriesIndexRoute,
  }

const ShellStationCountrySelectorRouteWithChildren =
  ShellStationCountrySelectorRoute._addFileChildren(
    ShellStationCountrySelectorRouteChildren,
  )

interface ShellRouteChildren {
  ShellEnergyChartsHeaderRoute: typeof ShellEnergyChartsHeaderRouteWithChildren
  ShellStationCountrySelectorRoute: typeof ShellStationCountrySelectorRouteWithChildren
  ShellIndexRoute: typeof ShellIndexRoute
  ShellOpenLibraryIndexRoute: typeof ShellOpenLibraryIndexRoute
}

const ShellRouteChildren: ShellRouteChildren = {
  ShellEnergyChartsHeaderRoute: ShellEnergyChartsHeaderRouteWithChildren,
  ShellStationCountrySelectorRoute:
    ShellStationCountrySelectorRouteWithChildren,
  ShellIndexRoute: ShellIndexRoute,
  ShellOpenLibraryIndexRoute: ShellOpenLibraryIndexRoute,
}

const ShellRouteWithChildren = ShellRoute._addFileChildren(ShellRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  ShellRoute: ShellRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
